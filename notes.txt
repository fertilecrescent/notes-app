Can you give a width to an item that is inline?
Oh wow, my study of css has already come to help me.  I understood how to use padding and box-sizing to get the correct size for my border.
Bro...you need to do that thing where the page display automatically updates upon file changes.
Random idea...don't be afraid to have a 'utils' module...it's not a sin.
Research decimal point px values (seems to work?)
I was born to make simple UIs with old school colors (pastels!)
When using calc(), addition and subtraction characters must surrounded by whitespace (who knew)!
Research fonts...which are built in, which are cross platform, importing fonts...
Research stylistic use of fonts (font theory?)
It'd be better to design things ahead of time in figma...
How to I configure VS code to not give me warnings when I use 'require()'?
What does the HTML 'disabled' attribute do?
Apparently disabling an element doesn't keep its click events from firing.
pointer-events
    The pointer-events CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.
Bruh you should look into javascript formatting/ers
Bruh you should study SVG
You need to research about accessing the stylesheet through javascript
What's the difference between 'display: none;' and 'visibility: hidden;'?
    I think 'visiblity: hidden' doesn't stop an element from taking up space while 'display: none' does;
typeof() versus instanceof?
ressearch modules on the frontend

--- SCRATCH PAD ---

(check) While add-folder-input is active, I want all other clickable items to be effectively disabled.
This means...

    (check) clicking on add-folder-button should have no effect
    (check) clicking on delete-folder-button should have no effect
    (check) clicking on any folder should have no effect
    (check) hovering over any of these elements should have no effect
    (can you write code that prevents future cases, e.g. if we were to add more clickable elements?)

    So...what we can do is assign a class name of 'clickable' to each of these elements.  When we activate add-folder-input, we can access these elements and remove their clickable properties (e.g. pointer on hover and click events)

    It turns out pointer-events: none; is the declaration we were looking for
    ...And it seems like add-folder-input is clickable because shows a pointer on hover, but...it doesn't have any registered 'click' callbacks, and it can't even be focused by clicking on it (becuase it's focused by default)
    
    So here's what we'll do
        (check) give every clickable element (e.g. add-folder button, delete-folder-button, folder) a class name of clickable
            NOTE: we already had a class of 'button' on the clickable icons which was basically serving the same purpose
        (check) set a css rule on .clickable:hover with a cursor:pointer declaration
        (check) edit add-folder-button's 'click' event call back so that it accesses .clickable, removes .clickable and adds .unclickable
        (check) .unclickable should have a single declaration: pointer-events: none;
        (check) add-folder-button should have a 'focusout' event that accesses .unclickable, removes .unclickable and adds .clickable
    

