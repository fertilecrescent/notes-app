(check) display a list of folders and get the style looking good (fake data for now)
(check) make it work with the database
    (check) create a folder schema
    (check) write code for connecting to the database
    (check) configure and use a .env folder for your database password and hit it from github
    (check) write DB endpoints for adding, retrieving, and deleting folders
    (check) RANDOM: move connectToDB to a subdirectory
    (check) let's go ahead and serve the frontend from the backend so we don't have to deal with cors (i think that's how it works?)
        (check) put the front end files in their own folder
        (check) set up a callback for GET requests to / that uses res.sendFile to send index.html, style.css, and script.js to the frontend
        (cool!) NOTE: might have to use express.static middleware but not sure
            ohh!!! I see how it's done now...you only use express to send the html file, but when your browser sees <script> and <link> tags it comes back and asks your server for those...so that's why you need to set express.static so that your browser knows where to look...
    (check) display folders on the frontend
        (check) make sure you save the root url as a variable at the top of the file (localhost:3000 for now)
        (check) we need a javascript function gets the folders as a list from the server
        (check!) need a function to create a .folder for each folder and append it #folder-container
    (check) delete folders from the frontend
        -(check) we need to be able to select a folder.  that is, when we click on it, it's color should change and stay changed, and we should save it to a global variable somewhere
        -(check) we have a button underneath .folder-box. it's red minus icon. we need to make it look good.
            -(check) assign it a click event callback function that fetches (DELETE root + folders/ + name/) (remember name is stored in a global)
            -(check) when it returns, we should remove .folder from the frontend, or display an error message (just do it as an alert() for now)
    (check) add folders from the frontend
        -(check) we have a button underneath .folder-box.  it's a green plus icon.
        -(check) when it's clicked, we should see a popup with an input, asking for a name
        -(check) when somewhere else on the screen is clicked, the popup should be hidden again
        -(check) make the screen loading look better (either load the screen after the database call, or do something about the width of the folder container (give it some initial content) so that it doesn't have to resize)...preferably the second option if that works
        -(check) input should focus when it's made visible
        -(check) input value should reset when it's hidden
        -(check) when we enter a value, a callback should should fetch POST root + folders/ + name/
        -(check) when we hear back from the api, we should either display an error message (if the name is already taken) or add the new folder

-(check) deselect folder when clicking on anything that's not that folder is clicked
-(check) remove horizontal scrollbar

##### now it's time to work on notes!!! #####

-make a frontend for notes
    -(check) copy and paste the HTML for folders underneath itself, and "folder" in the attributes and class names with "note"
    -(note) apply the CSS from folders to notes
    -(check) pick and apply a fontawesome add-note icon
    -(check) notes-container should appear in the center of the screen, pushing folder-container to the left
        -(check) wrap notes-container and folders-container in a single container (content-container)
        -(check) make content container's width be half the size of the screen + half the width of notes container (which is the same as the width of folders container)
        -(check) make it a flex box and justify content to the right
    -(check) make add-folder-button appear in the appropriate position while notes-container is active

-make a backend for notes
    -(check) add a 'notes' field to the Folder schema
        -(check) do research about arrays in mongoose
        -(check) do research about strings in mongoose (do you have to set a length?)
        -(check) do research about subschemas
        # okay so, I want a given note for a given folder to have a unique 'name' amongst other notes within that folder
        # apparently, a unique index on an array field enforces that the same value cannot appear in the arrays of more than one document in the collection, but does not prevent the document from appearing more than once in a single document's array. {'wizards': ['gandalf', 'gandalf', 'harry']} is valid, but adding the following document {'wizards': ['gandalf', 'hagrid']} is invalid
    -(check) write an endpoint for adding (empty) notes to a folder
        -(check) should be a POST endpoint at /folders/:folder_name/:note_name
        -(check) function should updateOne on Folder with a query on folder_name, eliminating results with an item in notes whose name equals note_name, and a call back that sends a 400 back to the user, indicated that they attempted to add a note with an already existing name, in the case that no folders matched the query
        -(check) add some notes to some folders
    -(check) write an endpoint for retrieving notes at a given folder
        -(check) should be a GET endpoint at /folders/:folder_name
        -(check) function should findOne on folder, querying {name: folder_name}, returning the query result to the user, or returning a 500 error if there isn't one
    -(check) test that the endpoints for adding and retrieving notes work
    -(check) write and test an endpoint for deleting notes

-(check) make the server run on 'npm start'
    -(check) set the value of 'package.json'.scrips.start to 'node ./src/server.js
    #wait! for some reason we get an AtlasError when starting the server this way
        #the environment variables aren't being read
            #it was fixed by moving .env to the root of the project directory (i.e. the same directory from which we're starting the server)
    #but omg! it turns out that I get a 404 error for my static files when I do this...
        #yeah it's because the route used by express.static is relative to the calling directory.  you can combat this by using __dirname in the argument


-(check) shouldn't need to refresh the server on changes to the backend or the browser on changes to the frontend
    # npm install nodemon then use the 'nodemon' command instead of 'node' to run your server

-maybe delete button should change color when a folder is selected
-css variables should only be in root if they're need at that level (otherwise put them in more specific rules)
-testing
-alternate stylesheets
-if a note name is not provided, display thee first n characters in the item display
-maybe display an appropriate error message if font-awesome fails due to page view limit
-research unique indexes more in depth